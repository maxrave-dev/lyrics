# Spring Application Configuration
spring.config.import=optional:file:.env[.properties]
spring.application.name=lyrics
spring.main.allow-bean-definition-overriding=true
# DB Configuration
spring.data.mongodb.database=${MONGODB_DATABASE:lyrics}
spring.data.mongodb.uri=${MONGODB_URI:mongodb://localhost:27017}
# HMAC Security Configuration
security.hmac.secret=${HMAC_SECRET:default-secret-key-please-change-in-production}
security.hmac.token-ttl=300000
# IP Whitelist Configuration
security.ip-whitelist=${ADMIN_IPS:127.0.0.1,192.168.1.100}
# Meilisearch Configuration
meilisearch.host=${MEILISEARCH_HOST:http://localhost:7700}
meilisearch.masterKey=${MEILISEARCH_MASTER_KEY:}
# Sentry Configuration
sentry.dsn=${SENTRY_DSN}
sentry.debug=false
# Add data like request headers and IP for users,
# see https://docs.sentry.io/platforms/java/guides/spring-boot/data-management/data-collected/ for more info
sentry.send-default-pii=true
# Enable sending logs to Sentry
sentry.logs.enabled=true
# Set traces-sample-rate to 1.0 to capture 100% of transactions for tracing.
# We recommend adjusting this value in production.
sentry.traces-sample-rate=1.0
sentry.logging.minimum-event-level=warn
sentry.logging.minimum-breadcrumb-level=warn
sentry.logging.minimum-level=warn
# Bucket4j Rate Limiting Configuration
bucket4j.enabled=true
bucket4j.cache-to-use=jcache
spring.cache.type=jcache
spring.cache.jcache.provider=com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
spring.cache.cache-names=buckets,filterConfigCache
spring.cache.caffeine.spec=maximumSize=100000,expireAfterAccess=3600s
# Rate Limit Filter - 30 requests per minute per IP (except admin IPs)
bucket4j.filters[0].cache-name=buckets
bucket4j.filters[0].url=.* 
bucket4j.filters[0].http-response-body={ "success": false, "error": { "error": true, "code": 429, "reason": "Too many requests, please try again later" } }
# Use the same IP detection logic for both skip condition and cache key
bucket4j.filters[0].rate-limits[0].skip-condition=@ipWhitelistService.isAdminIp(getHeader("X-Forwarded-For") ?: getHeader("X-Real-IP") ?: getRemoteAddr())
bucket4j.filters[0].rate-limits[0].cache-key=getHeader("X-Forwarded-For") ?: getHeader("X-Real-IP") ?: getRemoteAddr()
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=15
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=minutes
bucket4j.filters[0].rate-limits[0].bandwidths[0].refill-speed=greedy
# Metrics for Rate Limiting
bucket4j.filters[0].metrics.enabled=true
bucket4j.filters[0].metrics.types=CONSUMED_COUNTER,REJECTED_COUNTER
bucket4j.filters[0].metrics.tags[0].key=IP
bucket4j.filters[0].metrics.tags[0].expression=getHeader("X-Forwarded-For") ?: getHeader("X-Real-IP") ?: getRemoteAddr()
bucket4j.filters[0].metrics.tags[1].key=URL
bucket4j.filters[0].metrics.tags[1].expression=getRequestURI()
springdoc.enable-kotlin=true
# Logging Configuration
logging.level.root=INFO
logging.level.org.simpmusic=DEBUG
